# Generated by Django 5.0.4 on 2024-05-04 19:18

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import employees.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('forecast', '0001_initial'),
        ('teams', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailabilityPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('available', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=8, unique=True, validators=[employees.models.validate_num_str], verbose_name='Employee ID')),
                ('first_name', models.CharField(max_length=256)),
                ('last_name', models.CharField(max_length=256)),
                ('email', models.CharField(blank=True, max_length=256, null=True)),
                ('phone', models.CharField(blank=True, max_length=256, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ONBOARDING', 'Onboarding'), ('ACTIVE', 'Active'), ('LEAVE', 'On Leave'), ('SUSPENDED', 'Suspended'), ('TERMINATED', 'Terminated')], default='ACTIVE', max_length=256)),
                ('employment_type', models.CharField(choices=[('OFFICER', 'Officer'), ('FULL_TIME_SALARIED', 'Full Time (Salaried)'), ('FULL_TIME_HOURLY', 'Full Time (Hourly)'), ('PART_TIME', 'Part Time (Hourly)'), ('SEASONAL', 'Seasonal'), ('INPATRIATE', 'Inpatriate'), ('EXPATRIATE', 'Expatriate'), ('CONTRACTOR', 'Contractor'), ('VARIABLE', 'Variable'), ('TEMPORARY_FULL_TIME', 'Temporary Full Time')], default='PART_TIME', max_length=256)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('home_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to='teams.team')),
                ('managed_teams', models.ManyToManyField(blank=True, related_name='managed_by', to='teams.team')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved', models.BooleanField(default=False)),
                ('effective_date', models.DateField()),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('friday', models.ManyToManyField(related_name='friday', to='employees.availabilityperiod')),
                ('monday', models.ManyToManyField(related_name='monday', to='employees.availabilityperiod')),
                ('saturday', models.ManyToManyField(related_name='saturday', to='employees.availabilityperiod')),
                ('sunday', models.ManyToManyField(related_name='sunday', to='employees.availabilityperiod')),
                ('thursday', models.ManyToManyField(related_name='thursday', to='employees.availabilityperiod')),
                ('tuesday', models.ManyToManyField(related_name='tuesday', to='employees.availabilityperiod')),
                ('wednesday', models.ManyToManyField(related_name='wednesday', to='employees.availabilityperiod')),
            ],
            options={
                'verbose_name_plural': 'Availabilities',
            },
        ),
        migrations.CreateModel(
            name='EmployeeSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_start_date', models.DateField()),
                ('effective_end_date', models.DateField()),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forecast.skill')),
            ],
        ),
    ]
